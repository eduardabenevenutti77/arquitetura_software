o que é arquitetura de software?
 - tudo o que é importante para o software
 - organização fundamental de um sistema, como seus componentes e a relação entre ele e o ambiente
 - é tudo que faz o ecossistema do desenvolvimento do sistema acontecer 
 - descrição de como sistema irá se comportar
 - surgiu com Dijkstra em 60, mas só se tornou popular em 90
 - garante que todos os requisitos exigidos pelo cliente vai acontecer 
 definição de camadas:
    - componentes de software 
    - aplicativos externos
    - sistemas ligados
    - fatores externos
 - arquitetura monolítica: aplicação gigante, sem estruturação! (não utilizado na atualidade) 
    - escalabilidade vertical
    - uma única estrutura
 - arquitetura em camada: divide o monolíto em partes, cada parte com a sua responsabilidade!
 - arquitetura orientadas em serviço: estrutura distribuida, quebra de serviços em serviços menores
 - arquitetura em microsserviços: utilização de serviços terceirizados
    - procesos são rodados em módulos separados!
 precisa ser definido:
    - controle e protocolos de comunicação
    - deve atender os requisitos do sistema!
 - define o custo e complexidade do sistema
 - suporte a manutenção e ao reuso
 - arquitetura com escalabilidade 
 - permite que o sistema altere funcionalidades sem afetar o projeto inteiro
 - redução de esforço na implementação de funcionalidades
 habilidade para ser arquiteto de software:
    - deve entender as estratégias de negócios da empresa
    - deve dominar técnicas de modelagem

o que é o tech lead?
 - apoia o arquiteto
 - coordena a equipe
 - possui conhecimento em desenvolvimento que está sendo usado
 - pensamento analítico

modelos de arquitetura de software:
 estilos arquiteturais: 
    - preve como as camadas da arquitetura irão reagir a determinadas ações
    - soluções para resolver determinadas classes de problemas
    - promovem conectores, interfaces, regras, combinações e reuso
    structure: organiza os componentes de um sistema (frameworks)
    shared memory: compartilhamento de dados entre processo numa estrutura compartilhada (linux)
    messaging styles: comunicação através de mensagens assíncronas (amazon)
    adaptive systems: se ajusta automaticamente às mudanças no ambiente (amazon/insta/netflix)
    distributed systems: conjunto de sistemas que se comunicam através de uma rede (apache)
 padrões arquiteturais:
    - solução recorrente para um problema recorrente
    padrão: resolve um problema específico em determinado contexto
    estilo: descreve as responsabilidades entre os componentes em alto nível, focando na solução do problema

revisão - 11/03

o que é arquitetura de software:
 - descrição do sistema, compreensão de como o sistema irá se comportar
 - não se olha de maneira rápida, precisa ter uma análise detalhada
 - o tech lead apoia as decisões do arquiteto

integrações entre sistemas:
 - conexão entre diferentes softwares para troca de dados de maneira transparente e eficiente
 união entre softwares - legados (antigos - versões atualizadas) ou modernos !!
 - sempre existe duas coisas diferentes que precisam se juntar
 - isso permite que diferentes o uso de : protocolos de comunicação distintos, padrões de dados e tecnologias
 - permite a construção de sistemas complexos por meio de componentes modulares e independentes
 - facilita o re-uso de funcionalidades, redução de tempo e custo, aumento de escalabilidade
 - desafios: fazer uma comunicação transparente e eficaz entre sistemas diferentes, segurança no trafego de informações, validar a qualidade dos dados trafegados, dificuldade na integração
 - benefícios: produtividade, aumento na experiência do usuário, eficiência operacional e feedbacks (insights) mais abragentes
SOA: arquitetura orientada a objetos, programas integrados, abstração de serviços (interfaces padronizadas), descoberta de serviços, composição de serviços, autonomia entre serviços, flexibilidade, reutilização de serviços e interoperabilidade
 padrões de intregrações - mensagens:
 XML - linguagem de marcação junto com html, mesmas formas de tag, troca de mensagens - SOAP
 JSON - notação em formato de objeto, usado em rest, amplamente usado em ambiente webs 
 padrões de intregrações - empresarial:
 EAI - padrão de conjutos e práticas - usados em ERP, CRM e SCM
 ETL - usado em sistemas de relatórios
Arquiteturas centralizadas: todos os serviços se conectam em um ponto central, facilidade na comunicação e coordenação - ESB
Arquiteturas distribuídas: 

middleware: software que facilitam a comunicação entre sistemas heterogêneos
APIs: interfaces padronizadas - SOA, sistemas podem se comunicar de maneira independente
EDA: troca de eventos que facilita a comunicação entre sistemas (várias APIs relacionadas ao mesmo tempo)

desafios: escalabilidade, segurança e manutenção, monitoramento, interoperabilidade e cultura organizacional
seguranças: autenticação (proteção de dados), autorização (proteção de dados), criptografia (evita a exposição de dados) - VPN, Firewall, SSL/TLS